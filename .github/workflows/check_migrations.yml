name: check migrations

on:
  push:
    branches:
      - main
      - maintenance
  pull_request:


jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: actions/github-script@v6
        with:
          script: |
            const { execSync } = require('child_process')
            //console.log(context)
            let firstCommit
            let lastCommit
            if (context.eventName === 'push') {
              firstCommit='HEAD^1'
              lastCommit='HEAD'
            } else if (context.eventName === 'pull_request') {
              firstCommit=context.payload.pull_request.base.sha
              lastCommit=context.payload.pull_request.head.sha
            } else {
              throw new Error('Unsupported event')
            }
            const rawFiles = execSync(`git diff --name-only --diff-filter=d "${firstCommit}" "${lastCommit}"`).toString()
            const files = rawFiles.split('\n').filter(f => /^forge\/db\/migrations\/2.*\.js$/.test(f))
            if (files.length > 0) {
              console.log('Modified migration files:')
              files.forEach(f => console.log(` - ${f}`))
              // Check they are the last files present in the directory
              const fs = require('fs')
              const path = require('path')
              const migrationDir = path.join(process.cwd(), 'forge', 'db', 'migrations')
              const allFiles = fs.readdirSync(migrationDir).filter(f => /^2.*\.js$/.test(f)).sort()
              const lastFiles = allFiles.slice(-files.length)
              // lastFiles should match the list of modified migration files
              const invalidFiles = files.filter(f => !lastFiles.includes(path.basename(f)))
              if (invalidFiles.length > 0) {
                throw new Error('Migrations added out of order')
              }
            }
